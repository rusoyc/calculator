{"version":3,"sources":["layout/Calculator.js","layout/ResultsScreen.js","layout/ComputationScreen.js","layout/Screen.js","layout/KeypadRow.js","components/Button.js","layout/Keypad.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","equation","result","onButtonPress","e","pressedButton","target","innerHTML","clear","indexOf","evalResult","eval","Number","isInteger","toFixed","setState","error","alert","trim","substr","length","this","className","Component","resultsScreen","props","children","computationScreen","screen","ResultsScreen","ComputationScreen","KeypadRow","button","classes","type","push","join","onClick","Keypad","Button","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba9adc26.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Screen from './Screen'\r\nimport Keypad from './Keypad'\r\n\r\nclass Calculator extends Component {\r\n    state = { \r\n        equation: '',\r\n        result: 0\r\n    }\r\n\r\n    onButtonPress = e => {\r\n        let equation = this.state.equation\r\n        const pressedButton = e.target.innerHTML\r\n\r\n        if (pressedButton === 'C'){\r\n            return this.clear()\r\n        }\r\n        else if ((pressedButton >= '0' && pressedButton <= '9') || pressedButton === '.'){\r\n            equation += pressedButton\r\n        }\r\n        else if (['+', '-', '*', '/', '%'].indexOf(pressedButton) !== -1){\r\n            equation += ' ' + pressedButton + ' '\r\n        }\r\n        else if (pressedButton === '='){\r\n            try{\r\n                const evalResult = eval(equation)\r\n                const result = Number.isInteger(evalResult) ? evalResult : evalResult.toFixed(2)\r\n                this.setState({result})\r\n            }   catch(error){\r\n                alert('Invalid Mathematical Equation')\r\n            }\r\n        }\r\n        else {\r\n            equation = equation.trim()\r\n            equation = equation.substr(0, equation.length - 1)\r\n        }\r\n        this.setState({equation: equation})\r\n    }\r\n\r\n    clear(){\r\n        this.setState({\r\n            equation: '',\r\n            result: 0\r\n        })\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <main className=\"calculator\">\r\n                <Screen equation={this.state.equation} result={this.state.result} />\r\n                <Keypad onButtonPress={this.onButtonPress} />\r\n            </main>\r\n        )\r\n    }\r\n}\r\n \r\nexport default Calculator;\r\n\r\n","import React from 'react';\r\n\r\nconst resultsScreen = (props) => (\r\n    <div className=\"results-screen\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default resultsScreen","import React from 'react';\r\n\r\nconst computationScreen = (props) => (\r\n    <div className=\"computation-screen\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default computationScreen","import React from 'react';\r\n\r\nimport ResultsScreen from './ResultsScreen'\r\nimport ComputationScreen from './ComputationScreen'\r\n\r\nconst screen = (props) => (\r\n    <section className=\"screen\">\r\n        <ResultsScreen>{props.result}</ResultsScreen>\r\n        <ComputationScreen>{props.equation}</ComputationScreen>\r\n    </section>\r\n)\r\n\r\nexport default screen","import React from 'react';\r\n\r\nconst KeypadRow = (props) => (\r\n    <div className=\"keypad-row\">\r\n        {props.children}\r\n    </div>\r\n)\r\n\r\nexport default KeypadRow;","import React from 'react';\r\n\r\nconst button = (props) => {\r\n    const classes = ['btn']\r\n\r\n    if (typeof props !== 'undefined' && typeof props.type !== 'undefined'){\r\n        classes.push('btn--' + props.type)\r\n    }\r\n\r\n    return (\r\n        <button className={classes.join(' ')} onClick={props.onButtonPress}>\r\n            {props.children}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default button","import React from 'react';\r\n\r\nimport KeypadRow from './KeypadRow'\r\nimport Button from '../components/Button'\r\n\r\nconst Keypad = (props) => (\r\n    <section className=\"keypad\">\r\n        <KeypadRow>\r\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>C</Button>\r\n            <Button type=\"primary\" onButtonPress={props.onButtonPress}>&larr;</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>%</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>/</Button>\r\n        </KeypadRow>\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>9</Button>\r\n            <Button onButtonPress={props.onButtonPress}>8</Button>\r\n            <Button onButtonPress={props.onButtonPress}>7</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>*</Button>\r\n        </KeypadRow>\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>6</Button>\r\n            <Button onButtonPress={props.onButtonPress}>5</Button>\r\n            <Button onButtonPress={props.onButtonPress}>4</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>-</Button>\r\n        </KeypadRow>\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>3</Button>\r\n            <Button onButtonPress={props.onButtonPress}>2</Button>\r\n            <Button onButtonPress={props.onButtonPress}>1</Button>\r\n            <Button type=\"operator\" onButtonPress={props.onButtonPress}>+</Button>\r\n        </KeypadRow>\r\n        <KeypadRow>\r\n            <Button onButtonPress={props.onButtonPress}>0</Button>\r\n            <Button onButtonPress={props.onButtonPress}>.</Button>\r\n            <Button type='large' onButtonPress={props.onButtonPress}>=</Button>\r\n        </KeypadRow>\r\n    </section>\r\n)\r\n\r\nexport default Keypad","import React from 'react';\nimport './styles/styles.css'\nimport Calculator from './layout/Calculator'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Calculator />\n      <p>catss</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}